"use strict";const dimensionTypes=["mass","length","time","temperature","current","substance","luminosity","information"];const prefixes={y:1e-24,z:1e-21,a:1e-18,f:1e-15,p:1e-12,n:1e-9,u:1e-6,m:.001,c:.01,d:.1,da:10,h:100,k:1e3,M:1e6,G:1e9,T:1e12,P:1e15,E:1e18,Z:1e21,Y:1e24,Ki:1024,Mi:1048576,Gi:1073741824,Ti:1099511627776,Pi:0x4000000000000,Ei:0x1000000000000000,Zi:11805916207174113e5,Yi:12089258196146292e8};const units={1:{s:1,d:[0,0,0,0,0,0,0,0]},"%":{s:.01,d:[0,0,0,0,0,0,0,0]},ppm:{s:1e-6,d:[0,0,0,0,0,0,0,0]},ppb:{s:1e-9,d:[0,0,0,0,0,0,0,0]},ppt:{s:1e-12,d:[0,0,0,0,0,0,0,0]},g:{s:.001,d:[1,0,0,0,0,0,0,0]},Da:{s:16605390666e-37,d:[1,0,0,0,0,0,0,0]},u:{s:16605390666e-37,d:[1,0,0,0,0,0,0,0]},AMU:{s:16605390666e-37,d:[1,0,0,0,0,0,0,0]},grain:{s:6479891e-11,d:[1,0,0,0,0,0,0,0]},ozm:{s:.028349523125,d:[1,0,0,0,0,0,0,0]},dram:{s:.0017718451953125,d:[1,0,0,0,0,0,0,0]},lbm:{s:.45359237,d:[1,0,0,0,0,0,0,0]},stone:{s:6.35029318,d:[1,0,0,0,0,0,0,0]},sg:{s:14.5939029372064,d:[1,0,0,0,0,0,0,0]},slug:{s:14.5939029372064,d:[1,0,0,0,0,0,0,0]},cwt:{s:45.359237,d:[1,0,0,0,0,0,0,0]},dwt:{s:.00155517384,d:[1,0,0,0,0,0,0,0]},uk_cwt:{s:50.80234544,d:[1,0,0,0,0,0,0,0]},ton:{s:907.18474,d:[1,0,0,0,0,0,0,0]},uk_ton:{s:1016.0469088,d:[1,0,0,0,0,0,0,0]},metric_ton:{s:1e3,d:[1,0,0,0,0,0,0,0]},tonne:{s:1e3,d:[1,0,0,0,0,0,0,0]},carat:{s:2e-4,d:[1,0,0,0,0,0,0,0]},assay_ton:{s:.029166666666666667,d:[1,0,0,0,0,0,0,0]},denier:{s:1.1111111111111112e-7,d:[1,-1,0,0,0,0,0,0]},tex:{s:1e-6,d:[1,-1,0,0,0,0,0,0]},m:{s:1,d:[0,1,0,0,0,0,0,0]},ang:{s:1e-10,d:[0,1,0,0,0,0,0,0]},picapt:{s:.000352777777777778,d:[0,1,0,0,0,0,0,0]},pica:{s:.00423333333333333,d:[0,1,0,0,0,0,0,0]},in:{s:.0254,d:[0,1,0,0,0,0,0,0]},mil:{s:254e-7,d:[0,1,0,0,0,0,0,0]},ft:{s:.3048,d:[0,1,0,0,0,0,0,0]},yd:{s:.9144,d:[0,1,0,0,0,0,0,0]},ell:{s:1.143,d:[0,1,0,0,0,0,0,0]},mi:{s:1609.344,d:[0,1,0,0,0,0,0,0]},survey_mi:{s:1609.3472186944373,d:[0,1,0,0,0,0,0,0]},nmi:{s:1852,d:[0,1,0,0,0,0,0,0]},Nmi:{s:1852,d:[0,1,0,0,0,0,0,0]},league:{s:5556,d:[0,1,0,0,0,0,0,0]},ly:{s:9460730472580800,d:[0,1,0,0,0,0,0,0]},parsec:{s:0x6da012f93c9a8c,d:[0,1,0,0,0,0,0,0]},survey_ft:{s:.3048006096012192,d:[0,1,0,0,0,0,0,0]},AU:{s:149597870700,d:[0,1,0,0,0,0,0,0]},chain:{s:20.116840233680467,d:[0,1,0,0,0,0,0,0]},link:{s:.20116840233680466,d:[0,1,0,0,0,0,0,0]},rod:{s:5.029210058420117,d:[0,1,0,0,0,0,0,0]},furlong:{s:201.16840233680466,d:[0,1,0,0,0,0,0,0]},fathom:{s:1.8288,d:[0,1,0,0,0,0,0,0]},us_fathom:{s:1.828803657607315,d:[0,1,0,0,0,0,0,0]},fermi:{s:1e-15,d:[0,1,0,0,0,0,0,0]},datamile:{s:1828.8,d:[0,1,0,0,0,0,0,0]},kayser:{s:100,d:[0,-1,0,0,0,0,0,0]},s:{s:1,d:[0,0,1,0,0,0,0,0]},sec:{s:1,d:[0,0,1,0,0,0,0,0]},min:{s:60,d:[0,0,1,0,0,0,0,0]},hr:{s:3600,d:[0,0,1,0,0,0,0,0]},day:{s:86400,d:[0,0,1,0,0,0,0,0]},week:{s:604800,d:[0,0,1,0,0,0,0,0]},fortnight:{s:1209600,d:[0,0,1,0,0,0,0,0]},yr:{s:31536e3,d:[0,0,1,0,0,0,0,0]},shake:{s:1e-8,d:[0,0,1,0,0,0,0,0]},K:{s:1,d:[0,0,0,1,0,0,0,0]},deltaC:{s:1,d:[0,0,0,1,0,0,0,0]},degF:{s:.5555555555555556,d:[0,0,0,1,0,0,0,0],o:255.3722222222222},degC:{s:1,d:[0,0,0,1,0,0,0,0],o:273.15},Ra:{s:.5555555555555556,d:[0,0,0,1,0,0,0,0]},Rank:{s:.5555555555555556,d:[0,0,0,1,0,0,0,0]},deltaF:{s:.5555555555555556,d:[0,0,0,1,0,0,0,0]},Reau:{s:1.25,d:[0,0,0,1,0,0,0,0],o:273.15},deltaReau:{s:1.25,d:[0,0,0,1,0,0,0,0]},kph:{s:.2777777777777778,d:[0,1,-1,0,0,0,0,0]},mph:{s:.44704,d:[0,1,-1,0,0,0,0,0]},fps:{s:.3048,d:[0,1,-1,0,0,0,0,0]},knot:{s:.514444444444444,d:[0,1,-1,0,0,0,0,0]},admkn:{s:.514773333333333,d:[0,1,-1,0,0,0,0,0]},c:{s:299792458,d:[0,1,-1,0,0,0,0,0]},grav:{s:9.80665,d:[0,1,-2,0,0,0,0,0]},galileo:{s:.01,d:[0,1,-2,0,0,0,0,0]},Pa:{s:1,d:[1,-1,-2,0,0,0,0,0]},mHg:{s:133322.39,d:[1,-1,-2,0,0,0,0,0]},mH2O:{s:9806.65,d:[1,-1,-2,0,0,0,0,0]},Torr:{s:133.322368421053,d:[1,-1,-2,0,0,0,0,0]},psi:{s:6894.75729316836,d:[1,-1,-2,0,0,0,0,0]},atm:{s:101325,d:[1,-1,-2,0,0,0,0,0]},bar:{s:1e5,d:[1,-1,-2,0,0,0,0,0]},inHg:{s:3386.3886666667,d:[1,-1,-2,0,0,0,0,0]},inH2O:{s:249.08891,d:[1,-1,-2,0,0,0,0,0]},ftHg:{s:40636.664,d:[1,-1,-2,0,0,0,0,0]},ftH2O:{s:2989.06692,d:[1,-1,-2,0,0,0,0,0]},Ba:{s:.1,d:[1,-1,-2,0,0,0,0,0]},"Pa-g":{s:1,d:[1,-1,-2,0,0,0,0,0],o:101325},"bar-g":{s:1e5,d:[1,-1,-2,0,0,0,0,0],o:101325},"psi-g":{s:6894.75729316836,d:[1,-1,-2,0,0,0,0,0],o:101325},N:{s:1,d:[1,1,-2,0,0,0,0,0]},dyn:{s:1e-5,d:[1,1,-2,0,0,0,0,0]},gf:{s:.00980665,d:[1,1,-2,0,0,0,0,0]},pond:{s:.00980665,d:[1,1,-2,0,0,0,0,0]},lbf:{s:4.4482216152605,d:[1,1,-2,0,0,0,0,0]},ozf:{s:.278013850953781,d:[1,1,-2,0,0,0,0,0]},pdl:{s:.138254954376,d:[1,1,-2,0,0,0,0,0]},"ton-force":{s:8896.443230521,d:[1,1,-2,0,0,0,0,0]},J:{s:1,d:[1,2,-2,0,0,0,0,0]},eV:{s:1602176487e-28,d:[1,2,-2,0,0,0,0,0]},erg:{s:1e-7,d:[1,2,-2,0,0,0,0,0]},cal:{s:4.1868,d:[1,2,-2,0,0,0,0,0]},Cal:{s:4186.8,d:[1,2,-2,0,0,0,0,0]},BTU:{s:1055.05585,d:[1,2,-2,0,0,0,0,0]},thm:{s:105505585,d:[1,2,-2,0,0,0,0,0]},Wh:{s:3600,d:[1,2,-2,0,0,0,0,0]},HPh:{s:2684519.53769617,d:[1,2,-2,0,0,0,0,0]},"ft-lb":{s:1.3558179483314,d:[1,2,-2,0,0,0,0,0]},"ft-lbf":{s:1.3558179483314,d:[1,2,-2,0,0,0,0,0]},RSI:{s:1,d:[-1,0,3,1,0,0,0,0]},RIP:{s:.17611018368230189,d:[-1,0,3,1,0,0,0,0]},clo:{s:.155,d:[-1,0,3,1,0,0,0,0]},tog:{s:.1,d:[-1,0,3,1,0,0,0,0]},W:{s:1,d:[1,2,-3,0,0,0,0,0]},PS:{s:735.49875,d:[1,2,-3,0,0,0,0,0]},HP:{s:745.69987158227,d:[1,2,-3,0,0,0,0,0]},P:{s:.1,d:[1,-1,-1,0,0,0,0,0]},rhe:{s:10,d:[-1,1,1,0,0,0,0,0]},St:{s:1e-4,d:[0,2,-1,0,0,0,0,0]},L:{s:.001,d:[0,3,0,0,0,0,0,0]},tsp:{s:492892159375e-17,d:[0,3,0,0,0,0,0,0]},tspm:{s:5e-6,d:[0,3,0,0,0,0,0,0]},tbs:{s:1478676478125e-17,d:[0,3,0,0,0,0,0,0]},fl_oz:{s:295735295625e-16,d:[0,3,0,0,0,0,0,0]},uk_fl_oz:{s:284130625e-13,d:[0,3,0,0,0,0,0,0]},cup:{s:.0002365882365,d:[0,3,0,0,0,0,0,0]},pt:{s:.000473176473,d:[0,3,0,0,0,0,0,0]},uk_pt:{s:.00056826125,d:[0,3,0,0,0,0,0,0]},qt:{s:.000946352946,d:[0,3,0,0,0,0,0,0]},uk_qt:{s:.0011365225,d:[0,3,0,0,0,0,0,0]},gal:{s:.003785411784,d:[0,3,0,0,0,0,0,0]},uk_gal:{s:.00454609,d:[0,3,0,0,0,0,0,0]},bushel:{s:.03523907016688,d:[0,3,0,0,0,0,0,0]},bbl:{s:.158987294928,d:[0,3,0,0,0,0,0,0]},oilbarrel:{s:.158987294928,d:[0,3,0,0,0,0,0,0]},beerbarrel:{s:.117347765304,d:[0,3,0,0,0,0,0,0]},uk_beerbarrel:{s:.16365924,d:[0,3,0,0,0,0,0,0]},MTON:{s:1.13267386368,d:[0,3,0,0,0,0,0,0]},GRT:{s:2.8316846592,d:[0,3,0,0,0,0,0,0]},gill:{s:.00011829411825,d:[0,3,0,0,0,0,0,0]},uk_gill:{s:.0001420653125,d:[0,3,0,0,0,0,0,0]},peck:{s:.00880976754172,d:[0,3,0,0,0,0,0,0]},dry_gal:{s:.00440488377086,d:[0,3,0,0,0,0,0,0]},dry_qt:{s:.001101220942715,d:[0,3,0,0,0,0,0,0]},dry_pt:{s:.0005506104713575,d:[0,3,0,0,0,0,0,0]},stere:{s:1,d:[0,3,0,0,0,0,0,0]},ar:{s:100,d:[0,2,0,0,0,0,0,0]},morgen:{s:2500,d:[0,2,0,0,0,0,0,0]},acre:{s:4046.87260987425,d:[0,2,0,0,0,0,0,0]},us_acre:{s:4046.87260987425,d:[0,2,0,0,0,0,0,0]},uk_acre:{s:4046.8564224,d:[0,2,0,0,0,0,0,0]},ha:{s:1e4,d:[0,2,0,0,0,0,0,0]},barn:{s:1e-28,d:[0,2,0,0,0,0,0,0]},b:{s:1,d:[0,0,0,0,0,0,0,1]},bit:{s:1,d:[0,0,0,0,0,0,0,1]},B:{s:8,d:[0,0,0,0,0,0,0,1]},byte:{s:8,d:[0,0,0,0,0,0,0,1]},word:{s:16,d:[0,0,0,0,0,0,0,1]},dword:{s:32,d:[0,0,0,0,0,0,0,1]},baud:{s:1,d:[0,0,-1,0,0,0,0,1]},A:{s:1,d:[0,0,0,0,1,0,0,0]},C:{s:1,d:[0,0,1,0,1,0,0,0]},Ah:{s:3600,d:[0,0,1,0,1,0,0,0]},e:{s:1602176634e-28,d:[0,0,1,0,1,0,0,0]},V:{s:1,d:[1,2,-3,0,-1,0,0,0]},ohm:{s:1,d:[1,2,-3,0,-2,0,0,0]},F:{s:1,d:[-1,-2,4,0,2,0,0,0]},H:{s:1,d:[1,2,-2,0,-2,0,0,0]},S:{s:1,d:[-1,-2,3,0,2,0,0,0]},mho:{s:1,d:[-1,-2,3,0,2,0,0,0]},Wb:{s:1,d:[1,2,-2,0,-1,0,0,0]},Mx:{s:1e-8,d:[1,2,-2,0,-1,0,0,0]},T:{s:1,d:[1,0,-2,0,-1,0,0,0]},Gs:{s:1e-4,d:[1,0,-2,0,-1,0,0,0]},gs:{s:1e-4,d:[1,0,-2,0,-1,0,0,0]},Fr:{s:3.3356409519815207e-10,d:[0,0,1,0,1,0,0,0]},Gi:{s:.7957747,d:[0,0,0,0,1,0,0,0]},Oe:{s:79.57747154594767,d:[0,-1,0,0,1,0,0,0]},mol:{s:1,d:[0,0,0,0,0,1,0,0]},molar:{s:1e3,d:[0,-3,0,0,0,1,0,0]},M:{s:1e3,d:[0,-3,0,0,0,1,0,0]},kat:{s:1,d:[0,0,-1,0,0,1,0,0]},U:{s:1.6666666666666667e-8,d:[0,0,-1,0,0,1,0,0]},cd:{s:1,d:[0,0,0,0,0,0,1,0]},lm:{s:1,d:[0,0,0,0,0,0,1,0]},lx:{s:1,d:[0,-2,0,0,0,0,1,0]},footcandle:{s:10.763910416709722,d:[0,-2,0,0,0,0,1,0]},footlambert:{s:3.4262590996353905,d:[0,-2,0,0,0,0,1,0]},lambert:{s:3183.098861837907,d:[0,-2,0,0,0,0,1,0]},phot:{s:1e4,d:[0,-2,0,0,0,0,1,0]},stilb:{s:1e4,d:[0,-2,0,0,0,0,1,0]},rad:{s:1,d:[0,0,0,0,0,0,0,0]},sr:{s:1,d:[0,0,0,0,0,0,0,0]},rev:{s:6.283185307179586,d:[0,0,0,0,0,0,0,0]},deg:{s:.017453292519943295,d:[0,0,0,0,0,0,0,0]},arcmin:{s:.00029088820866572163,d:[0,0,0,0,0,0,0,0]},arcsec:{s:484813681109536e-20,d:[0,0,0,0,0,0,0,0]},rpm:{s:.10471975511965977,d:[0,0,-1,0,0,0,0,0]},Hz:{s:6.283185307179586,d:[0,0,-1,0,0,0,0,0]},Bq:{s:1,d:[0,0,-1,0,0,0,0,0]},Gy:{s:1,d:[0,2,-2,0,0,0,0,0]},Sv:{s:1,d:[0,2,-2,0,0,0,0,0]},R:{s:258e-6,d:[-1,0,1,0,1,0,0,0]},RAD:{s:.01,d:[0,2,-2,0,0,0,0,0]},rem:{s:.01,d:[0,2,-2,0,0,0,0,0]},Ci:{s:37e9,d:[0,0,-1,0,0,0,0,0]}};const numDimensionTypes=dimensionTypes.length;function Quantity(magnitude,dimensions,offset){this.magnitude=magnitude;if(dimensions){this.dimensions=dimensions}else{this.dimensions=new Array(numDimensionTypes);for(let dimIdx=0;dimIdx<numDimensionTypes;dimIdx++){this.dimensions[dimIdx]=0}}if(offset){this.offset=offset}else{this.offset=0}}Quantity.prototype.dimensionality=function(){let total=0;for(let ii=0;ii<numDimensionTypes;ii++){if(this.dimensions[ii]!=0){total+=Math.abs(this.dimensions[ii])}}return total};Quantity.prototype.copyDimensions=function(){let dimCopy=new Array(numDimensionTypes);for(let ii=0;ii<numDimensionTypes;ii++){dimCopy[ii]=this.dimensions[ii]}return dimCopy};Quantity.prototype.copy=function(){return new Quantity(this.magnitude,this.copyDimensions(),this.offset)};Quantity.prototype.sameDimensions=function(other){if(typeof other==="number"){other=new Quantity(other)}for(let ii=0;ii<numDimensionTypes;ii++){if(this.dimensions[ii]!=other.dimensions[ii]){return false}}return true};Quantity.prototype.add=function(other){if(typeof other==="number"){other=new Quantity(other)}if(!this.sameDimensions(other)){throw"Cannot add units that are not alike"}if(other.offset!=0){throw"A unit with a zero offset (such as degC or degF) cannot be "+"added to another unit"}let newMagnitude=this.magnitude+other.magnitude;return new Quantity(newMagnitude,this.copyDimensions(),this.offset)};Quantity.prototype.sub=function(other){if(typeof other==="number"){other=new Quantity(other)}if(!this.sameDimensions(other)){throw"Cannot subtract units that are not alike"}let newMagnitude=this.magnitude+this.offset-(other.magnitude+other.offset);let newOffset=0;if(other.offset!=0){newOffset=0}else{newOffset=this.offset;newMagnitude-=newOffset}return new Quantity(newMagnitude,this.copyDimensions(),newOffset)};Quantity.prototype.mul=function(other){if(typeof other==="number"){other=new Quantity(other)}if(this.offset!=0||other.offset!=0){throw"Cannot multiply dimensions with an offset, if using "+"temperatures consider using 'deltaC' or 'deltaF' instead"}let newMagnitude=this.magnitude;newMagnitude*=other.magnitude;let newDimensions=new Array(numDimensionTypes);for(let ii=0;ii<numDimensionTypes;ii++){newDimensions[ii]=this.dimensions[ii]+other.dimensions[ii]}return new Quantity(newMagnitude,newDimensions)};Quantity.prototype.inv=function(){if(this.offset!=0){throw"Cannot invert dimensions with an offset, if using "+"temperatures consider using 'deltaC' or 'deltaF' instead"}let newMagnitude=1/this.magnitude;let newDimensions=this.copyDimensions();for(let ii=0;ii<numDimensionTypes;ii++){newDimensions[ii]=-newDimensions[ii]}return new Quantity(newMagnitude,newDimensions)};Quantity.prototype.div=function(other){if(typeof other==="number"){other=new Quantity(other)}if(this.offset!=0||other.offset!=0){throw"Cannot divide dimensions with an offset, if using "+"temperatures consider using 'deltaC' or 'deltaF' instead"}let inverseValue=other.inv();return this.mul(inverseValue)};Quantity.prototype.pow=function(n){if(!Number.isInteger(n)){throw"Quantities don't support dimensions with fractional powers"}if(this.offset!=0&&n>1){throw"Cannot raise units with zero offsets to powers > 1"}if(n==0){return new Quantity(1)}let newMagnitude=Math.pow(this.magnitude,n);let newDimensions=this.copyDimensions();for(let ii=0;ii<numDimensionTypes;ii++){newDimensions[ii]*=n}return new Quantity(newMagnitude,newDimensions,this.offset)};Quantity.prototype.root=function(n){if(!Number.isInteger(n)||n<1){throw"Root may only be a positive integer greater than or equal to 1"}if(this.offset!=0&&n>1){throw"Cannot take root of units with zero offset"}if(this.magnitude<0){throw"Root function not supported for magnitudes with negative "+"magnitudes"}let newDimensions=this.copyDimensions();for(let ii=0;ii<numDimensionTypes;ii++){let update=newDimensions[ii]/n;if(!Number.isInteger(n)){throw"Root operation would result in a fractional dimensional "+"power. This is not supported"}newDimensions[ii]=update}let newMagnitude=Math.pow(this.magnitude,1/n);return new Quantity(newMagnitude,newDimensions,this.offset)};Quantity.prototype.compare=function(other,tolerance){if(typeof other==="number"){other=new Quantity(other)}if(!this.sameDimensions(other)){throw"Cannot compare quantities with unlike units"}if(typeof tolerance==="undefined"){tolerance=0}let absoluteTolerance=0;if(typeof tolerance==="object"){if(!this.sameDimensions(tolerance)){throw"tolerance dimensions are not compatible with this quantity"}if(tolerance.offset!=0){throw"Absolute tolerance in units with a zero offset is not allowed"}absoluteTolerance=tolerance.magnitude}else{if(this.offset!=0&&tolerance!=0){throw"Fractional tolerances not allowed for quantities with a "+"zero offset. Use an absolute tolerance instead"}absoluteTolerance=this.magnitude*tolerance}let thisMag=this.magnitude+this.offset;let otherMag=other.magnitude+other.offset;if(otherMag-thisMag<-absoluteTolerance){return 1}else if(otherMag-thisMag>absoluteTolerance){return-1}else{return 0}};Quantity.prototype.eq=function(other,tolerance){return this.compare(other,tolerance)==0};Quantity.prototype.lt=function(other,tolerance){return this.compare(other,tolerance)<0};Quantity.prototype.lte=function(other,tolerance){return this.compare(other,tolerance)<=0};Quantity.prototype.gt=function(other,tolerance){return this.compare(other,tolerance)>0};Quantity.prototype.gte=function(other,tolerance){return this.compare(other,tolerance)>=0};Quantity.prototype.in=function(unitString){let convertQuantity=quantity(1,unitString);if(!this.sameDimensions(convertQuantity)){throw"Cannot convert units that are not alike"}var currentMagnitude=this.magnitude+this.offset;var newMagnitude=currentMagnitude-convertQuantity.offset;var newMagnitude=newMagnitude/convertQuantity.magnitude;return newMagnitude};Quantity.prototype.with=function(unitList){let unitArray=new Array(unitList.length);for(let ii=0;ii<unitList.length;ii++){let unitQuantity=getUnitQuantity(unitList[ii]);unitArray[ii]=unitQuantity.dimensions}let useUnits=new Array;let useUnitsPower=new Array;let remainder=this.dimensionality();let remainderArray=this.dimensions.slice();while(remainder>0){let bestIdx=-1;let bestInv=0;let bestRemainder=remainder;let bestRemainderArray=new Array(dimensionTypes.length);for(let unitIdx=0;unitIdx<unitList.length;unitIdx++){for(let isInv=-1;isInv<=1;isInv+=2){let newRemainder=0;let newRemainderArray=new Array(dimensionTypes.length);for(let dimIdx=0;dimIdx<dimensionTypes.length;dimIdx++){newRemainderArray[dimIdx]=remainderArray[dimIdx]-isInv*unitArray[unitIdx][dimIdx];newRemainder+=Math.abs(newRemainderArray[dimIdx])}if(newRemainder<bestRemainder){bestIdx=unitIdx;bestInv=isInv;bestRemainder=newRemainder;bestRemainderArray=newRemainderArray}}}if(bestRemainder>=remainder){throw"Cannot represent this quantity with the supplied units"}let existingIdx=useUnits.indexOf(bestIdx);if(existingIdx==-1){useUnits.push(bestIdx);useUnitsPower.push(bestInv)}else{useUnitsPower[existingIdx]+=bestInv}remainder=bestRemainder;remainderArray=bestRemainderArray}let numerator="";let denominator="";for(let ii=0;ii<useUnits.length;ii++){if(useUnitsPower[ii]>0){numerator+=unitList[useUnits[ii]];if(useUnitsPower[ii]>1){numerator+="^"+useUnitsPower[ii]+" "}else{numerator+=" "}}else{denominator+=unitList[useUnits[ii]];if(useUnitsPower[ii]<-1){denominator+="^"+-useUnitsPower[ii]+" "}else{denominator+=" "}}}let fullUnits="";if(numerator.length==0&&denominator.length==0){fullUnits="1"}else if(denominator.length==0){fullUnits=numerator.trim()}else{if(numerator.length==0){numerator="1 "}fullUnits=(numerator+"/ "+denominator).trim()}return[this.in(fullUnits),fullUnits]};Quantity.prototype.inSI=function(){return this.with(["[k]g","m","s","K","A","mol","cd","bit","Hz","N","Pa","J","W","C","V","F","ohm","S","Wb","T","H","lm","lx","Bq","Gy"])};Quantity.prototype.inCGS=function(){return this.with(["g","[c]m","s","deltaC","dyn","erg","Ba","P","St","cd","bit"])};Quantity.prototype.inUS=function(){return this.with(["lbm","ft","s","Ra","gal","lbf","BTU","HP","cd","bit"])};Quantity.prototype.toString=function(){let asSI=this.inSI();return asSI[0].toString()+" "+asSI[1]};function getUnitQuantity(unitName){let unitParts=["","",""];let appendIdx=1;for(let ii=0;ii<unitName.length;ii++){if(unitName[ii]=="["){appendIdx=0;continue}else if(unitName[ii]=="]"){appendIdx=1;continue}else if(unitName[ii]=="^"){appendIdx=2;continue}unitParts[appendIdx]+=unitName[ii]}let prefixValue;if(unitParts[0]){prefixValue=prefixes[unitParts[0]];if(!prefixValue){throw unitParts[0]+" is not a valid prefix"}}else{prefixValue=1}if(!unitParts[1]){throw'Error parsing unit: "'+unitName+'"'}if(!units.hasOwnProperty(unitParts[1])){throw unitParts[1]+" is not a valid unit"}let unitStructure=units[unitParts[1]];let scale=unitStructure.s;let dims=new Array(numDimensionTypes);for(let ii=0;ii<numDimensionTypes;ii++){dims[ii]=unitStructure.d[ii]}let offset;if(unitStructure.hasOwnProperty("o")){offset=unitStructure.o}else{offset=0}let unitQuantity=new Quantity(scale,dims,offset);let powerValue;if(unitParts[2]){powerValue=parseInt(unitParts[2]);if(!powerValue){throw power+" is not a valid unit power"}}else{powerValue=1}if(prefixValue!=1){unitQuantity.magnitude=unitQuantity.magnitude*prefixValue}if(powerValue!=1){unitQuantity=unitQuantity.pow(powerValue)}return unitQuantity}function quantity(magnitude,unitString){let returnQuantity=new Quantity(1);if(unitString){let sections=unitString.split("/");if(sections.length>2){throw"Cannot parse unit with 2 or more '/' symbols"}for(let si=0;si<sections.length;si++){let unitSyms=sections[si].trim().split(/\s+/g);for(let ui=0;ui<unitSyms.length;ui++){let unitQuantity=getUnitQuantity(unitSyms[ui]);if(si>0){unitQuantity=unitQuantity.inv()}if(unitQuantity.offset==0){returnQuantity=returnQuantity.mul(unitQuantity)}else if(sections.length==1&&unitSyms.length==1){returnQuantity=unitQuantity}else{throw"Cannot create compound units from units with zero offsets"}}}}returnQuantity.magnitude*=magnitude;return returnQuantity}function define(symbol,magnitude,unitStr,offset){if(units.hasOwnProperty(symbol)){throw"The unit "+symbol+" is already defined"}if(typeof magnitude==="undefined"){magnitude=1}let newQuantity=quantity(magnitude,unitStr);let newDimensions=new Array(numDimensionTypes);for(let ii=0;ii<numDimensionTypes;ii++){newDimensions[ii]=newQuantity.dimensions[ii]}units[symbol]={s:newQuantity.magnitude,d:newDimensions};if(offset){offset=offset/newQuantity.magnitude;units[symbol].o=offset}}var pqm={quantity:quantity,define:define};module.exports=pqm;